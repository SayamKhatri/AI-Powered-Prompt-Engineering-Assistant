name: Deploy to Cloud Run on merge to main

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'

jobs:
  continuous_integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    outputs:
      is_merge: ${{ steps.check_merge.outputs.is_merge }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check if merge commit
        id: check_merge
        run: |
          # A normal commit has 2 tokens (commit and one parent), while a merge commit has 3 or more.
          TOKEN_COUNT=$(git rev-list --parents -n 1 HEAD | wc -w)
          if [ "$TOKEN_COUNT" -le 2 ]; then
            echo "Not a merge commit. Skipping delivery & deployment."
            echo "is_merge=false" >> $GITHUB_OUTPUT
          else
            echo "is_merge=true" >> $GITHUB_OUTPUT
          fi

  continuous_delivery:
    name: Continuous Delivery
    runs-on: ubuntu-latest
    needs: continuous_integration
    if: needs.continuous_integration.outputs.is_merge == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: promptbud

      - name: Build and Push Docker Image to Artifact Registry
        run: |
          IMAGE="${{ secrets.ARTIFACT_REGISTRY_URL }}"
          docker build -t $IMAGE .
          gcloud auth configure-docker us-east1-docker.pkg.dev
          docker push $IMAGE

  continuous_deployment:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: continuous_delivery
    if: needs.continuous_integration.outputs.is_merge == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to Cloud Run
        run: |
          IMAGE="${{ secrets.ARTIFACT_REGISTRY_URL }}"
          gcloud run deploy prompt-assistant \
            --image=$IMAGE \
            --platform=managed \
            --region=us-east1 \
            --allow-unauthenticated \
            --memory=512Mi \
            --port=8080 \
            --set-env-vars=GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
